@page "/Login"
@using EcommerceWeb.Services.Interfaces;
@using LoginAPI.Dto;
@using Microsoft.AspNetCore.Components.Forms;

@inject IUsuarioService _service
@inject NavigationManager _navigation

@if (OnInitializedCompleted)
{
    <EditForm Model="@loginUsuario" OnValidSubmit="LoginUsuario">
        <DataAnnotationsValidator />
        <div class="container d-flex align-items-center justify-content-center vh-100">
            <div class="col-md-3">
                <div class="card shadow">
                    <div class="card-body">
                        <h1 class="card-title text-center mb-4">Login</h1>
                        <div class="mb-3">
                            <label for="email" class="form-label">Usuario</label>
                            <input type="text"  @bind-value="loginUsuario.Username" class="form-control form-control-sm" placeholder="Digite seu nome" />
                            <ValidationMessage For="() => loginUsuario.Username" class="validation-message" />
                        </div>
                        <div class="mb-3">
                            <label for="senha" class="form-label">Senha</label>
                            <input type="password" @bind-value="loginUsuario.Password" class="form-control form-control-sm" id="senha" placeholder="Digite sua senha" />
                            <ValidationMessage For="() => loginUsuario.Password" class="validation-message" />
                        </div>
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary btn-block">
                                Entrar
                            </button>
                        </div>
                        <p class="text-center mt-3">Ainda não possui uma conta? <a href="/Cadastrar">Cadastre-se</a></p>
                    </div>
                    @if (!string.IsNullOrEmpty(Mensagem))
                    {
                        <div class="alert alert-danger">
                            @Mensagem
                        </div>
                    }
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    public LoginUsuarioDto loginUsuario { get; set; }
    public string Mensagem { get; set; } = string.Empty;
    public bool OnInitializedCompleted { get; set; } = false;
    [Parameter]
    public bool IsRedirectToCheckout { get; set; } = false;

    protected override void OnInitialized()
    {
        loginUsuario = new();
        OnInitializedCompleted = true;

    }
    public async Task LoginUsuario()
    {
        try
        {
            await _service.Login(loginUsuario);

            if (IsRedirectToCheckout)
                _navigation.NavigateTo("pagamento");
            else
                _navigation.NavigateTo("/");

        }
        catch (Exception ex)
        {
            Mensagem = ex.Message;
        }

    }
}
